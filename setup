#!/bin/bash

echo 'Enter the physics of the problem (hd or rhd)'
read phy

if [[ $phy == rhd ]]
then
   echo 'Select the fixed background metric (1. Minkowski, 2. Schwarzschild, 3. Eddington-Finkelstein, 4. Kerr-Schild)'
   read met
fi

if [[ $met == 1 ]]
then
   metric='Minkowski'
fi
if [[ $met == 2 ]]
then
   metric='Schwarzschild'
fi
if [[ $met == 3 ]]
then
   metric='Eddington-Finkelstein'
fi
if [[ $met == 4 ]]
then
   metric='Kerr-Schild'
fi

echo 'Select the kind of Equation of State (1. Ideal, 2. Dust)'
read eqstate

if [[ $eqstate == 1 ]]
then
   eos='ideal'
fi
if [[ $eqstate == 2 ]]
then
   eos='dust'
fi

echo 'Enter the number of dimensions (1, 2, or 3. Enter 4 for 2.5)'
read dim

echo 'Enter the coordinate system (cart, cyl or sph)'
read coord

if [[ $phy == "hd"  ]]
then
   echo 'Do you want gravity as a external force? (y/n)'
   read grav
fi

aztekas_path=$(cd  "$(dirname "$0" )" && pwd)

cat << EOF > Makefile
#####################################
#### Define dimension parameters ####
#####################################
#----------------------------------------------------------------------
# From the list below, please activate/deactivate the options that     
# apply to your run. If you modify any of these options, make sure     
# that you recompile the whole code by typing "make clean; make" 
#----------------------------------------------------------------------

#####################################
# Ghost cells
#####################################

PARAM += -Dgc=3

#####################################

#####################################
# Physics (rhd,hd,mhd,rmhd)
#####################################

PHY    = $phy

# Metric (Minkowski, Schwarzschild, Eddington-Finkelstein, Kerr-Schild)
METRIC = $metric

ifeq (\$(PHY),hd)
        PARAM += -DPHYSICS=HD
endif
ifeq (\$(PHY),rhd)
        PARAM += -DPHYSICS=RHD
endif

eos = $eos
ifeq (\$(eos),ideal)
        PARAM += -DEOS=IDEAL
endif
ifeq (\$(eos),dust)
        PARAM += -DEOS=DUST
endif

#####################################

#####################################
# Dimension
#####################################

DIM = $dim

ifeq (\$(DIM),1)
	PARAM += -DDIM=1
	PARAM += -Deq=3
	PARAM += -Dgraf=1
endif
ifeq (\$(DIM),2)
	PARAM += -DDIM=2
	PARAM += -Deq=4
	PARAM += -Dgraf=2
endif
ifeq (\$(DIM),4)
	PARAM += -DDIM=4
	PARAM += -Deq=5
	PARAM += -Dgraf=2
endif
ifeq (\$(DIM),3)
	PARAM += -DDIM=3
	PARAM += -Deq=5
	PARAM += -Dgraf=3
endif

#####################################

#####################################
# Coordinates (cart,cyl,sph)
#####################################

COORD = $coord

ifeq (\$(COORD),cart)
	PARAM += -DCOORDINATES=CARTESIAN
endif
ifeq (\$(COORD),cyl)
	PARAM += -DCOORDINATES=CYLINDRICAL
endif
ifeq (\$(COORD),sph)
	PARAM += -DCOORDINATES=SPHERICAL
endif

#####################################

#####################################
# PATH TO AZTEKAS
#####################################
AZTPATH = $aztekas_path
#####################################

#####################################
# Integration method
#####################################

INT = standard

ifeq (\$(INT),standard)
	PARAM += -Dintegration=0
	INT = 
endif
ifeq (\$(INT),pvrs)
	PARAM += -Dintegration=1
	INT = -pvrs
endif

#####################################

#####################################
# Compilation
#####################################

ifeq (\$(PHY),hd)
SOURCES = \$(AZTPATH)/Src/main.c \\
	  \$(AZTPATH)/Src/alloc.c \\
	  \$(AZTPATH)/Src/mesh.c \\
	  ./initial.c \\
	  \$(AZTPATH)/Src/timestep.c \\
	  \$(AZTPATH)/Src/input.c \\
	  \$(AZTPATH)/Src/output.c \\
	  \$(AZTPATH)/Src/integration\$(INT).c \\
	  \$(AZTPATH)/Src/flux.c \\
	  \$(AZTPATH)/Src/runge-kutta.c \\
	  \$(AZTPATH)/Src/limiters.c \\
	  \$(AZTPATH)/Src/vectors.c \\
	  \$(AZTPATH)/Src/restart.c \\
	  \$(AZTPATH)/Src/auxfunc.c \\
	  ./boundaries.c \\
	  \$(AZTPATH)/Src/bound_cond.c \\
	  \$(AZTPATH)/Src/HD/q2uvector.c \\
	  \$(AZTPATH)/Src/HD/u2qvector.c \\
	  \$(AZTPATH)/Src/HD/qvector.c \\
	  \$(AZTPATH)/Src/HD/fvector.c \\
	  \$(AZTPATH)/Src/HD/gvector.c \\
	  \$(AZTPATH)/Src/HD/hvector.c \\
	  \$(AZTPATH)/Src/HD/svector.c \\
	  \$(AZTPATH)/Src/HD/metric.c \\
	  \$(AZTPATH)/Src/EOS/eos.c \\
	  ./user_sources.c \\
	  ./user_input.c
endif 

ifeq (\$(PHY),rhd)
SOURCES = \$(AZTPATH)/Src/main.c \\
	  \$(AZTPATH)/Src/alloc.c \\
	  \$(AZTPATH)/Src/mesh.c \\
	  ./initial.c \\
	  \$(AZTPATH)/Src/timestep.c \\
	  \$(AZTPATH)/Src/input.c \\
	  \$(AZTPATH)/Src/output.c \\
	  \$(AZTPATH)/Src/integration\$(INT).c \\
	  \$(AZTPATH)/Src/flux.c \\
	  \$(AZTPATH)/Src/runge-kutta.c \\
	  \$(AZTPATH)/Src/limiters.c \\
	  \$(AZTPATH)/Src/vectors.c \\
	  \$(AZTPATH)/Src/restart.c \\
	  \$(AZTPATH)/Src/auxfunc.c \\
	  ./boundaries.c \\
	  \$(AZTPATH)/Src/bound_cond.c \\
	  \$(AZTPATH)/Src/RHD/q2uvector.c \\
	  \$(AZTPATH)/Src/RHD/u2qvector.c \\
	  \$(AZTPATH)/Src/RHD/qvector.c \\
	  \$(AZTPATH)/Src/RHD/fvector.c \\
	  \$(AZTPATH)/Src/RHD/gvector.c \\
	  \$(AZTPATH)/Src/RHD/hvector.c \\
	  \$(AZTPATH)/Src/RHD/svector.c \\
	  \$(AZTPATH)/Src/RHD/surface.c \\
	  \$(AZTPATH)/Src/RHD/\$(METRIC)/metric.c \\
	  \$(AZTPATH)/Src/EOS/eos.c \\
	  ./user_sources.c \\
	  ./user_input.c
endif

#OBJS = \$(SOURCES:.c=.o)

FLAGS = -Ofast -lm

COMPILER = gcc
AZT_HEAD = \$(AZTPATH)/Src/Headers
CFLAGS = -I\$(AZT_HEAD) -I.
EXEC = aztekas

#####################################

\$(EXEC): \$(SOURCES)
	@echo ""
	@echo "Compiling problem file ..."
	\$(COMPILER) \$(PARAM) -fopenmp \$(SOURCES) \$(FLAGS) \$(CFLAGS) -o \$(EXEC)  
	@echo "\$(bla)"
	@echo "aztekas compiled successfully"
	
clean:
	rm -f \$(EXEC)
EOF

if [ $dim -eq 1 ]
then
   echo 'Set boundary in X1max (outflow,reflective,periodic,inflow)'
   read bound_x1max
   if [[ $bound_x1max == "periodic" ]]
   then
      bound_x1max="periodic_x1"
      bound_x1min=""
   else
      echo 'Set boundary in X1min (outflow,reflective,inflow)'
      read bound_x1min
      bound_x1max=$bound_x1max"_x1max"
      bound_x1min=$bound_x1max"_x1min"
   fi

fi

if [ $dim -eq 2 ] || [ $dim -eq 4 ]
then
   echo 'Set boundary in X1max (outflow,reflective,periodic,inflow)'
   read bound_x1max
   if [[ $bound_x1max == "periodic" ]]
   then
      bound_x1max="periodic_x1"
      bound_x1min=""
   else
      echo 'Set boundary in X1min (outflow,reflective,inflow)'
      read bound_x1min
      bound_x1max=$bound_x1max"_x1max"
      bound_x1min=$bound_x1max"_x1min"
   fi

   echo 'Set boundary in X2max (outflow,reflective,periodic,inflow)'
   read bound_x2max
   if [[ $bound_x2max == "periodic" ]]
   then
      bound_x2max="periodic_x2"
      bound_x2min=""
   else
      echo 'Set boundary in X2min (outflow,reflective,inflow)'
      read bound_x2min
      bound_x2max=$bound_x2max"_x2max"
      bound_x2min=$bound_x2max"_x2min"
   fi
fi

if [ $dim -eq 3 ]
then
   echo 'Set boundary in X1max (outflow,reflective,periodic,inflow)'
   read bound_x1max
   if [[ $bound_x1max == "periodic" ]]
   then
      bound_x1max="periodic_x1"
      bound_x1min=""
   else
      echo 'Set boundary in X1min (outflow,reflective,inflow)'
      read bound_x1min
      bound_x1max=$bound_x1max"_x1max"
      bound_x1min=$bound_x1max"_x1min"
   fi

   echo 'Set boundary in X2max (outflow,reflective,periodic,inflow)'
   read bound_x2max
   if [[ $bound_x2max == "periodic" ]]
   then
      bound_x2max="periodic_x2"
      bound_x2min=""
   else
      echo 'Set boundary in X2min (outflow,reflective,inflow)'
      read bound_x2min
      bound_x1max=$bound_x1max"_x1max"
      bound_x1min=$bound_x1max"_x1min"
   fi

   echo 'Set boundary in X3max (outflow,reflective,periodic,inflow)'
   read bound_x3max
   if [[ $bound_x3max == "periodic" ]]
   then
      bound_x3max="periodic_x3"
      bound_x3min=""
   else
      echo 'Set boundary in X3min (outflow,reflective,inflow)'
      read bound_x3min
      bound_x3max=$bound_x3max"_x3max"
      bound_x3min=$bound_x3max"_x3min"
   fi
fi

if [ $dim -eq 1 ]
then
cat << EOF > param.h
#include<macros.h>

// Set as cond_X whereas
// cond : {outflow,reflective,periodic,inflow}
// X : {x1max,x1min,x2max,x2min,x3max,x3min}

#define ${bound_x1max}        TRUE
#define ${bound_x1min}        TRUE
EOF
fi

if [ $dim -eq 2 ] || [ $dim -eq 4 ]
then
cat << EOF > param.h
#include<macros.h>

// Set as cond_X whereas
// cond : {outflow,reflective,periodic,inflow}
// X : {x1max,x1min,x2max,x2min,x3max,x3min}

#define ${bound_x1max}        TRUE
#define ${bound_x1min}        TRUE
#define ${bound_x2max}        TRUE
#define ${bound_x2min}        TRUE
EOF
fi

if [ $dim -eq 3 ]
then
cat << EOF > param.h
#include<macros.h>

// Set as cond_X whereas
// cond : {outflow,reflective,periodic,inflow}
// X : {x1max,x1min,x2max,x2min,x3max,x3min}

#define ${bound_x1max}        TRUE
#define ${bound_x1min}        TRUE
#define ${bound_x2max}        TRUE
#define ${bound_x2min}        TRUE
#define ${bound_x3max}        TRUE
#define ${bound_x3min}        TRUE
EOF
fi

cat << EOF >> param.h

#define RECONST               MC
#define FLUX                  HLL
#define GRID                  UNIFORM

EOF

date="$(date "+%d-%m-%Y %H:%M:%S")"
echo "Author"
read author
cat << EOF > initial.c
/* 
 *  aztekas initial module
 *  Date of creation: $date
 *  author: $author 
 */
#include"main.h"

void Initial()
{
   int n, i, j, k, cell;

   //Initialize time
   grid.time = 0.0;

   //Initialize dt
   dt = 0.0;
}
EOF

cat << EOF > boundaries.c
/* 
 *  aztekas boundaries module
 *  Date of creation: $date
 *  author: $author 
 */
#include"main.h"

int Boundaries(double *B)
{
   int n, i, j, k, cell;

EOF

if [ $dim -eq 1 ]
then
   if [[ $bound_x1max == "outflow_x1max" ]] || [[ $bound_x1min == "outflow_x1min" ]]
   then
      BOUND="Outflow"

cat << EOF >> boundaries.c
   $BOUND(B);
EOF
   fi

   if [[ $bound_x1max == "periodic_x1" ]] || [[ $bound_x1min == "periodic_x1" ]]
   then
      BOUND="Periodic"

cat << EOF >> boundaries.c
   $BOUND(B);
EOF
   fi

   if [[ $bound_x1max == "reflective_x1max" ]] || [[ $bound_x1min == "reflective_x1min" ]]
   then
      BOUND="Reflection"

cat << EOF >> boundaries.c
   $BOUND(B);
EOF
   fi
fi

if [ $dim -eq 2 ] || [ $dim -eq 4 ]
then
   if [[ $bound_x1max == "outflow_x1max" ]] || [[ $bound_x1min == "outflow_x1min" ]] || [[ $bound_x2max == "outflow_x2max" ]] || [[ $bound_x2min == "outflow_x2min" ]]


   then
      BOUND="Outflow"

cat << EOF >> boundaries.c
   $BOUND(B);
EOF
   fi

   if [[ $bound_x1max == "periodic_x2" ]] || [[ $bound_x1min == "periodic_x2"  ]] || [[ $bound_x2max == "periodic_x2" ]] || [[ $bound_x2min == "periodic_x2"  ]]

   then
      BOUND="Periodic"

cat << EOF >> boundaries.c
   $BOUND(B);
EOF
   fi

   if [[ $bound_x1max == "reflective_x1max" ]] || [[ $bound_x1min == "reflective_x1min"  ]] || [[ $bound_x2max == "reflective_x2max" ]] || [[ $bound_x2min == "reflective_x2min"  ]]
   then
      BOUND="Reflection"

cat << EOF >> boundaries.c
   $BOUND(B);
EOF
   fi
fi
cat << EOF >> boundaries.c

   return 0;
}
EOF

cat << EOF > user_sources.c
/* 
 *  aztekas boundaries module
 *  Date of creation: $date
 *  author: $author 
 */
#include"main.h"

void User_Source_Terms(double *s, double *u, gauge_ local_grid)
{
   double rho, p, vx1=0.0, vx2=0.0, vx3=0.0;

   rho = u[0];
   p   = u[1];
#if DIM == 1
   vx1 = u[2];
#elif DIM == 2
   vx1 = u[2];
   vx2 = u[3];
#elif DIM == 3 || dim == 4
   vx1 = u[2];
   vx2 = u[3];
   vx3 = u[4];
#endif

EOF

if [[ $grav == 'n' ]] || [[ $phy == 'rhd'  ]]
then

cat << EOF >> user_sources.c
   s[0] = 0;
   s[1] = 0;
   s[2] = 0;
   s[3] = 0;
   s[4] = 0;
}
EOF
fi

if [[ $grav == 'y' ]]
then
if [[ $coord == 'cart' ]]
then
cat << EOF >> user_sources.c
   double x = local_grid.x[1];
   double y = local_grid.x[2];
   double z = local_grid.x[3];
   double r = sqrt(x*x + y*y + z*z);

   s[0] = 0;
   s[1] = -(rho*vx1*x + rho*vx2*y + rho*vx3*z)/pow(r,3.0);
   s[2] = -(rho*x)/pow(r,3.0);
   s[3] = -(rho*y)/pow(r,3.0);
   s[4] = -(rho*z)/pow(r,3.0);
}
EOF
fi
if [[ $coord == 'cyl' ]]
then
cat << EOF >> user_sources.c
   double R = local_grid.x[1];
   double z = local_grid.x[2];
   double r = sqrt(R*R + z*z);

   s[0] = 0;
   s[1] = -(rho*vx1*R + rho*vx2*z)/pow(r,3.0);
   s[2] = -(rho*R)/pow(r,3.0);
   s[3] = -(rho*z)/pow(r,3.0);
   s[4] = 0;
}
EOF
fi
if [[ $coord == 'sph' ]]
then
cat << EOF >> user_sources.c
   double r = local_grid.x[1];

   s[0] = 0;
   s[1] = -rho*vx1/(r*r);
   s[2] = -rho/(r*r);
   s[3] = 0.0;
   s[4] = 0.0;
}
EOF
fi
fi

cat << EOF > user_input.c
/**
 * @file user_input.c
 *
 * @author Emilio Tejeda
 *
 * @brief Important input parameters for \a aztekas.
 */

//Do not erase any of these libraries//
#include"main.h"

FILE *paramfile;

int User_Parameters(char const *paramfile_name)
{
   int   BUFFER_SIZE = 612;
   char t_key[BUFFER_SIZE], t_value[BUFFER_SIZE], t_firstChar;
   
   //if input paramfile_name is null
   if(!paramfile_name || *paramfile_name == '\0')
   {
      fprintf(stderr, "Invalid parameter file name\n");
      exit(EXIT_FAILURE);
   }
      
   //open file
   paramfile = fopen (paramfile_name, "r");

   if (paramfile == NULL)
   {
      fprintf(stderr, "Error opening parameter file: %s\n", paramfile_name);
      exit(EXIT_FAILURE);
   }
      
   //read individual settings lines
   while(fscanf(paramfile, " %c", &t_firstChar) == 1 )
   {

      if(t_firstChar != '/' && t_firstChar != '%')
      {
         // Not a comment so read the key value pair
         // Move back one space in the input stream with seek
         fseek(paramfile, -1, SEEK_CUR);

         if(fscanf (paramfile, "%s = %s", t_key, t_value) == 2)
         {
/*
            if(strcmp(t_key,"nl")==0)
            {
               nl = atof(t_value);
            }

            if(strcmp(t_key,"pl")==0)
            {
               pl = atof(t_value);
            }

            if(strcmp(t_key,"vx1l")==0)
            {
               vx1l = atof(t_value);
            }

            if(strcmp(t_key,"vx2l")==0)
            {
               vx2l = atof(t_value);
            }

            if(strcmp(t_key,"vx3l")==0)
            {
               vx3l = atof(t_value);
            }

            if(strcmp(t_key,"nr")==0)
            {
               nr = atof(t_value);
            }

            if(strcmp(t_key,"pr")==0)
            {
               pr = atof(t_value);
            }

            if(strcmp(t_key,"vx1r")==0)
            {
               vx1r = atof(t_value);
            }

            if(strcmp(t_key,"vx2r")==0)
            {
               vx2r = atof(t_value);
            }

            if(strcmp(t_key,"vx3r")==0)
            {
               vx3r = atof(t_value);
            }

            if(strcmp(t_key,"x_0")==0)
            {
               x_0 = atof(t_value);
            }
*/
         }
      }
            
      // Ignore the rest of the line.
      int fscanret = fscanf(paramfile, "%*[^\n]"); 
   }
      
   fclose(paramfile);         

   if(*outputfile == '\0')
   {
      printf("Check parameters file: Didn't find a name for output file\n");
      exit(EXIT_FAILURE);
   }

   return 0;   
}
EOF

echo 'Enter characteristic name for the simulation'
read char_name

cat << EOF > $char_name.param
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% OUTPUT FILE AND DIRECTORY %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
outputdirectory = DATA/
outputfile      = ${char_name}_

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% CHECK SIMULATION PARAMETERS (1 -> true, 0 -> false) %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
check_param = 0

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% OUTPUT FORMAT (1 -> BINARY, 0 -> ASCII) %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
binary = 0

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% RESTART SIMULATION (1 -> TRUE, 0 -> FALSE) %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
restart_simulation = 0
restartfile        = DATA/${char_name}_0.dat
restart_filecount  = 0

%%%%%%%%%%%%%%%
% DEFINE MESH %
%%%%%%%%%%%%%%%
Nx1 = 256
Nx2 = 0
Nx3 = 0

%%%%%%%%%%%%%%%%%%%%%%%%
% DEFINE DOMAIN LIMITS %
%%%%%%%%%%%%%%%%%%%%%%%%

x1max = 1.0
x2max = 1.0
x3max = 1.0
x1min = 0.0
x2min = 0.0
x3min = 0.0

%%%%%%%%%%%%%%%%%%%
% TIME PARAMETERS %
%%%%%%%%%%%%%%%%%%%
tmax     = 1.0
timefile = 0.1

%%%%%%%%%%%%%%%%%%
% COURANT FACTOR %
%%%%%%%%%%%%%%%%%%
cou = 0.25

%%%%%%%%%%%%%%%%%%%%
% POLYTROPIC INDEX %
%%%%%%%%%%%%%%%%%%%%
K = 1.6666666666666666666666666666666666666

%%%%%%%%%%%%%%%%%%%%%%%
% BOUNDARY PARAMETERS %
%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%
% INITIAL PARAMETERS %
%%%%%%%%%%%%%%%%%%%%%%
EOF

mkdir Paramfiles Headerfiles Boundaryfiles Initialfiles
mkdir Graphics
cp $aztekas_path/Graphics/* ./Graphics/
